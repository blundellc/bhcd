#!/usr/bin/python

from itertools import izip
import argparse, datetime
from scipy.special import betaln
from collections import defaultdict
from math import log

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--tag',  help="tag of run")
    parser.add_argument('-d', '--date',  help="date of run",
            default=datetime.datetime.now().strftime('%Y%m%d'))
    parser.add_argument('-b', '--burnin', help="number of samples to drop (just first by default)",
            type=int, default=1)
    parser.add_argument('--prob-file', help='file with probability trace')
    parser.add_argument('test_file')
    parser.add_argument('pred_file')
    args = parser.parse_args()

    in_dir = 'output/'+args.date+'/irm'
    if args.tag is not None:
        in_dir += '/'+args.tag

    graph_file = in_dir + '/graph'
    names_file = in_dir + '/names'
    status_file = in_dir + '_status'
    dom_file = in_dir + '_dom0'

    print 'loading data', graph_file, args.test_file, names_file
    edges, names = load_edges(graph_file, names_file)
    test, names = load_edges(args.test_file, names_file)

    print 'loading model', status_file, dom_file
    print '+ outputting', args.pred_file

    status = open(status_file)
    dom = open(dom_file)
    pred = open(args.pred_file, 'w')
    if args.prob_file is not None:
        prob_file = open(args.prob_file, 'w')
        prob_file.write('time, lprob, num_clust, beta_prop, beta_mag\n')
    else:
        prob_file = None

    for line_num, (dom_line, status_line) in enumerate(izip(dom, status)):
        line_num -= args.burnin
        if line_num < 0:
            continue
        if line_num >= 100 and (line_num % 100) != 0:
            continue

        # timestamp -> src, dst-> log predictives src, dst at that timestamp.
        time_lpred = defaultdict(lambda: defaultdict(lambda: defaultdict(float)))

        timestamp = extract_pred(time_lpred, dom_line, status_line,
                edges, test)
        output_pred(pred, timestamp, time_lpred, names, test)
        if prob_file is not None:
            extract_prob(prob_file, dom_line, status_line, edges)

    pred.close()
    if prob_file is not None:
        prob_file.close()


def output_pred(pred, timestamp, time_lpred, names, test):
    for src, dst in time_lpred:
        value = "false"
        if test[src, dst]:
            value = "true"
        pred.write('%e,%s,%s,%s,%f,%f\n' % (
                timestamp,
                names[src], names[dst], value, 
                time_lpred[src, dst][False],
                time_lpred[src, dst][True]))

def load_edges(graph_file, names_file):
    names = {}
    with open(names_file) as ff:
        for line in ff:
            idx, name = line.strip().split(None, 1)
            names[int(idx)] = name

    edges = {}
    with open(graph_file) as ff:
        for line in ff:
            dom, src, dst, value = line.strip().split()
            assert(int(dom) == 0)
            edges[int(src), int(dst)] = int(value)
    return edges, names

def extract_line(dom_line, status_line, edges):
    num, llik, lpart, npart, ljoint, betaprop, betamag, alpha, timestamp = (
                map(float, status_line.replace(':', ' ').strip().split())
            )
    beta = betamag/(1+betaprop)
    alpha = betaprop*beta

    clusters = dict(enumerate(map(int, dom_line.strip().split())))
    num_ones = defaultdict(int)
    num_zeroes = defaultdict(int)
    for src, dst in edges:
        # no self edges in irm
        assert src != dst
        csrc = clusters[src]
        cdst = clusters[dst]
        num_ones[csrc, cdst] += edges[src, dst]
        num_zeroes[csrc, cdst] += 1-edges[src,dst]
    return timestamp, alpha, beta, clusters, num_ones, num_zeroes

def extract_pred(time_lpred, dom_line, status_line, edges, test):
    timestamp, alpha, beta, clusters, num_ones, num_zeroes = extract_line(dom_line,
            status_line, edges)

    for src, dst in test:
        csrc = clusters[src]
        cdst = clusters[dst]
        n1 = num_ones[csrc, cdst]
        n0 = num_zeroes[csrc, cdst]
        zz = betaln(alpha+n1, beta+n0)
        time_lpred[src, dst][False] = betaln(alpha+n1, beta+n0+1) - zz
        time_lpred[src, dst][True]  = betaln(alpha+n1+1, beta+n0) - zz
    return timestamp

def extract_prob(prob_file, dom_line, status_line, edges):
    timestamp, alpha, beta, clusters, num_ones, num_zeroes = extract_line(dom_line,
            status_line, edges)

    zz = betaln(alpha, beta)
    lprob = 0
    clustids = list(set(clusters.values()))
    for csrc in clustids:
        for cdst in clustids:
            n1 = num_ones[csrc, cdst]
            n0 = num_zeroes[csrc, cdst]
            lprob += betaln(alpha+n1, beta+n0) - zz

    # hyperparameter prior...
    lprob += -2.5*log(alpha+beta)

    mag = alpha+beta
    prop = alpha/beta
    prob_file.write('%f, %e, %d, %e, %e\n' % (timestamp, lprob,
        len(clustids), prop, mag))

if __name__ == '__main__':
    main()

