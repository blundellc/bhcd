#!/usr/bin/python

import json, sys
from collections import defaultdict
from math import *

def tree_load(fname = "output/out.tree"):
    with open(fname) as treef:
        jtree = json.load(treef)

    nodes = {}
    root_id = None
    for elem in jtree['tree']:
        if 'root' in elem:
            ee = elem['root']
            assert root_id is None
            root_id = ee['id']
            nodes[root_id] = Branch(id=root_id, props=ee)
        elif 'leaf' in elem:
            ee = elem['leaf']
            leaf = Leaf(label=ee['label'], props=ee)
            nodes[ee['parent']].add_child(leaf)
        elif 'stem' in elem:
            ee = elem['stem']
            id = ee['child']
            branch = Branch(id=id, props=ee)
            nodes[id] = branch
            nodes[ee['parent']].add_child(branch)
        else:
            assert False
    return nodes[root_id]

class Tree(object):
    def __init__(self, props=None):
        self.logprob = props['logprob']
        self.logresp = props['logresp']
        self.parent = None

    def set_parent(self, parent):
        self.parent = parent

class Branch(Tree):
    def __init__(self, id=None, **kwargs):
        super(Branch, self).__init__(**kwargs)
        self.id = id
        self.children = []
        self.leaves = set()

    def __str__(self):
        return '%1.2e:{%s}' % (self.logresp,
                ', '.join(map(str, self.children)))

    def add_child(self, child):
        self.children.append(child)
        child.set_parent(self)
        self.add_descendant(child)

    def add_descendant(self, descedant):
        self.leaves.update(descedant.leaves)
        if self.parent is not None:
            self.parent.add_descendant(descedant)

    def remove_child(self, old_child):
        for ii, ch in enumerate(self.children):
            if ch is old_child:
                del self.children[ii]
                if len(self.children) == 0:
                    self.parent.remove_child(self)
                elif len(self.children) == 1:
                    if self.parent is not None:
                        self.parent.replace_child(self, self.children[0])
                return
        assert False

    def replace_child(self, old_child, new_child):
        for ii, ch in enumerate(self.children):
            if ch is old_child:
                old_child.parent = None
                del self.children[ii]
                self.add_child(new_child)
                return
        assert False

    def num_leaves(self):
        return len(self.leaves)

    def write_json(self, out):
        out.write('{\n\t"tree": [\n')
        out.write('\t\t  {"root": {"logprob": %e, "logresp": %e, "id": 0 } }\n'
                % (self.logprob, self.logresp))
        queue = [(0,ch) for ch in self.children]
        next_id = 1
        while queue:
            pa, cur = queue.pop()
            if hasattr(cur, 'children'):
                out.write('\t\t, {"stem": {"logprob": %e, "logresp": %e, "parent": %d, "child": %d } }\n'
                        % (cur.logprob, cur.logresp, pa, next_id)
                        )
                queue.extend([(next_id, ch) for ch in cur.children])
                next_id += 1
            else:
                out.write('\t\t, {"leaf": {"logprob": %e, "logresp": %e, "parent": %d, "label": "%s" } }\n'
                        % (cur.logprob, cur.logresp, pa, cur.label)
                        )
        out.write('\t]\n}\n')


class Leaf(Tree):
    def __init__(self, label=None, **kwargs):
        super(Leaf, self).__init__(**kwargs)
        self.label = label
        self.leaves = set([label])

    def __str__(self):
        return self.label

    def num_leaves(self):
        return 1

def data_load(fname = "output/out.fit"):
    data = Data(fname)
    with open(fname) as dataf:
        for line in dataf:
            data.add_line(line)
    return data

class Data(object):
    def __init__(self, fname=None):
        self.fname = fname
        self.edges = {}
        self.popularity = defaultdict(int)

    def add_line(self, line):
        fields = [field.strip() for field in line.strip().split(",")]
        timestamp = fields[0]
        src = fields[1]
        dst = fields[2]
        truth = fields[3]
        if truth == 'true':
            truth = True
        elif truth == 'false':
            truth = False
        else:
            assert(False)

        lp_false = float(fields[4])
        lp_true = float(fields[5])
        self.add(src, dst, truth, lp_false, lp_true)

    def add(self, src, dst, truth, lp_false, lp_true):
        if truth:
            self.popularity[src] += 1
            self.popularity[dst] += 1
        self.edges[src, dst] = {None: truth, False: lp_false, True: lp_true}

    def popularity_among(self, src, others):
        count = 0
        for other in others:
            if self.edges[src, other] or self.edges[other, src]:
                count += 1
        return count

def main():
    sys.setrecursionlimit(100000)
    if len(sys.argv) < 4:
        print 'usage: %s <tree> <fit> <json>' % (sys.argv[0],)
        sys.exit(1)
    tree_name = sys.argv[1]
    fit_name = sys.argv[2]
    json_name = sys.argv[3]
    tree = tree_load(tree_name)
    data = data_load(fit_name)

    max_labels = 10
    max_cluster = 15
    queue = [(tree.logresp, tree)]
    while queue:
        logresp, cur = queue.pop()
        if logresp > log(0.5) or isinstance(cur, Leaf):
            if len(cur.leaves) <= max_cluster:
                cur.parent.remove_child(cur)
                continue
            label = ' '.join(['%s' % (l) for l in
                sorted(cur.leaves, key=lambda leaf: -data.popularity[leaf])][:max_labels])
#            label = ' '.join(['%s' % (l) for l in
#                sorted(cur.leaves, key=lambda leaf: -data.popularity_among(leaf, cur.leaves))][:max_labels])
            props = {'logresp': cur.logresp, 'logprob': cur.logprob}
            new_leaf = Leaf(label=label, props=props)
            cur.parent.replace_child(cur, new_leaf)
            print logresp, label
            continue

        lognotresp = log(1.0 - exp(logresp))
        for child in cur.children:
            queue.append((lognotresp + child.logresp, child))

    # in case we thinned out a lot
    while len(tree.children) == 1:
        tree = tree.children[0]

    print tree
    with open(json_name, 'w') as out:
        tree.write_json(out)

if __name__ == '__main__':
    main()

